<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <title>Enkripsi & Dekripsi File Aman</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-color: #f3f4f6;
            --text-color: #1f2937;
            --primary-color: #6366f1;
            --primary-hover: #7e57c2;
            --secondary-color: #e5e7eb;
            --secondary-hover: #d1d5db;
            --success-color: #10b981;
            --success-hover: #059669;
            --border-color: #d1d5db;
            --input-bg: #fff;
            --input-border: #e0e6ed;
            --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --border-radius: 0.5rem;
            --transition-duration: 0.2s;
        }

        .dark-mode {
            --bg-color: #111827;
            --text-color: #f9fafb;
            --primary-color: #8b5cf6;
            --primary-hover: #a855f7;
            --secondary-color: #1f2937;
            --secondary-hover: #374151;
            --success-color: #14e5b0;
            --success-hover: #06d6a0;
            --border-color: #4b5563;
            --input-bg: #374151;
            --input-border: #6b7280;
            --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            transition: background-color var(--transition-duration), color var(--transition-duration);
        }

        .tabs {
            display: flex;
            justify-content: center;
            padding: 1rem 0;
            background-color: transparent;
        }

        .tab-button {
            flex: 1;
            padding: 1rem;
            text-align: center;
            color: var(--text-color);
            cursor: pointer;
            font-weight: 500;
            border-bottom: 2px solid transparent;
            transition: color var(--transition-duration), border-color var(--transition-duration), background-color var(--transition-duration);
            border-radius: var(--border-radius) var(--border-radius) 0 0;
            background-color: var(--secondary-color);
        }

        .tab-button:hover {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
            background-color: var(--secondary-hover);
        }

        .tab-button.active {
            color: #fff;
            border-bottom-color: var(--success-color);
            background-color: var(--success-color);
            font-weight: 700;
        }

        .tab-content {
            display: none;
            padding: 2rem;
        }

        .tab-content.active {
            display: block;
        }

        .container {
            max-width: 800px;
            margin: auto;
            background-color: var(--bg-color);
            padding: 2rem;
            border-radius: var(--border-radius);
            margin-top: 2rem;
            box-shadow: var(--box-shadow);
            border: 1px solid var(--border-color);
        }

        h2 {
            margin-bottom: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
            text-align: center;
        }

        label {
            display: block;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }

        input, select {
            padding: 0.75rem;
            width: 100%;
            border-radius: var(--border-radius);
            border: 2px solid var(--input-border);
            background-color: var(--input-bg);
            color: var(--text-color);
            margin-bottom: 1rem;
            transition: border-color var(--transition-duration), background-color var(--transition-duration);
            box-sizing: border-box;
        }

        input:focus, select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.15);
        }

        button {
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius);
            border: none;
            background-color: var(--primary-color);
            color: white;
            cursor: pointer;
            font-weight: 600;
            transition: background-color var(--transition-duration), transform var(--transition-duration), box-shadow var(--transition-duration);
            width: 100%;
            display: block;
            margin: 1rem auto;
            text-align: center;
        }

        button:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.1);
        }

        button:active {
            transform: translateY(0);
            box-shadow: none;
        }

        .status {
            margin-top: 1.5rem;
            font-size: 0.875rem;
            color: var(--text-color);
            text-align: center;
            padding: 0.75rem;
            background-color: var(--secondary-color);
            border-radius: var(--border-radius);
            border: 1px solid var(--border-color);
        }

        a.download-link {
            display: inline-block;
            margin-top: 1rem;
            background-color: var(--success-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius);
            text-decoration: none;
            font-weight: 600;
            transition: background-color var(--transition-duration), transform var(--transition-duration);
            text-align: center;
            width: fit-content;
            margin-left: auto;
            margin-right: auto;
        }

        a.download-link:hover {
            background-color: var(--success-hover);
            transform: translateY(-2px);
        }

        #previewContainer {
            margin-top: 1.5rem;
            text-align: center;
            border: 2px dashed var(--border-color);
            padding: 1rem;
            border-radius: var(--border-radius);
            background-color: var(--secondary-color);
        }

        #previewContainer img, #previewContainer video {
            max-width: 100%;
            margin-top: 0.75rem;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
        }

        @media (max-width: 640px) {
            .container {
                padding: 1.5rem;
                margin-top: 1rem;
            }
            .tabs {
                flex-direction: column;
            }
            .tab-button {
                width: 100%;
                border-bottom: 2px solid transparent;
                border-radius: 0;
            }
            .tab-button:not(.active) {
                background-color: var(--secondary-hover);
            }
        }
    </style>
</head>
<body>

<div class="tabs">
    <div class="tab-button active" data-tab="encryptTab">Enkripsi</div>
    <div class="tab-button" data-tab="decryptTab">Dekripsi</div>
</div>

<div class="container">
    <div id="encryptTab" class="tab-content active">
        <h2>Enkripsi File</h2>
        <label for="fileInputEnc">Pilih file:</label>
        <input type="file" id="fileInputEnc" />
        <button id="encryptBtn">Enkripsi</button>
        <p class="status" id="statusEnc"></p>
        <a id="downloadLink" class="download-link" style="display:none;">Download Enkripsi</a>
    </div>

    <div id="decryptTab" class="tab-content">
        <h2>Dekripsi File</h2>
        <label for="fileInputDec">Pilih file terenkripsi:</label>
        <input type="file" id="fileInputDec" />
        <label for="keyInput">Kunci HEX:</label>
        <input type="text" id="keyInput" placeholder="Masukkan kunci HEX" />
        <label for="fileTypeSelect">Pilih ekstensi hasil dekripsi:</label>
        <select id="fileTypeSelect">
            <option value="txt">.txt</option>
            <option value="png">.png</option>
            <option value="jpg">.jpg</option>
            <option value="mp4">.mp4</option>
            <option value="zip">.zip</option>
            <option value="rar">.rar</option>
        </select>
        <button id="decryptBtn">Dekripsi</button>
        <p class="status" id="statusDec"></p>
        <a id="downloadLinkDec" class="download-link" style="display:none;">Download Dekripsi</a>
        <div id="previewContainer"></div>
    </div>
</div>

<script>
    // Fungsi untuk menghasilkan nama file acak
    function generateRandomFileName(length = 24) {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let randomName = '';
        for (let i = 0; i < length; i++) {
            randomName += characters.charAt(Math.floor(Math.random() * characters.length));
        }
        return randomName;
    }

    // Aktifkan dark mode berdasarkan waktu (18:00 - 06:00)
    const jam = new Date().getHours();
    if (jam >= 18 || jam < 6) document.body.classList.add("dark-mode");

    // Tab switching
    document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', () => {
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            button.classList.add('active');
            document.getElementById(button.dataset.tab).classList.add('active');
        });
    });

    function readFileAsArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = reject;
            reader.readAsArrayBuffer(file);
        });
    }

    function bufferToHex(buffer) {
        return Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join('');
    }

    function hexToBuffer(hex) {
        return new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16))).buffer;
    }

    async function generateKey() {
        return await crypto.subtle.generateKey({ name: "AES-GCM", length: 256 }, true, ["encrypt", "decrypt"]);
    }

    async function encryptFile(file) {
        const buffer = await readFileAsArrayBuffer(file);
        const key = await generateKey();
        const iv = crypto.getRandomValues(new Uint8Array(12));
        const encrypted = await crypto.subtle.encrypt({ name: "AES-GCM", iv }, key, buffer);
        return { encrypted, iv, key };
    }

    async function decryptFile(file, keyHex) {
        const buffer = await readFileAsArrayBuffer(file);
        const data = new Uint8Array(buffer);
        const iv = data.slice(0, 12);
        const content = data.slice(12);
        const key = await crypto.subtle.importKey("raw", hexToBuffer(keyHex), "AES-GCM", false, ["decrypt"]);
        return await crypto.subtle.decrypt({ name: "AES-GCM", iv }, key, content);
    }

    document.getElementById('fileInputEnc').addEventListener('change', () => {
        document.getElementById('statusEnc').textContent = "";
        document.getElementById('downloadLink').style.display = "none";
    });

    document.getElementById('encryptBtn').addEventListener('click', async () => {
        const fileInput = document.getElementById('fileInputEnc');
        const status = document.getElementById('statusEnc');
        const downloadLink = document.getElementById('downloadLink');

        if (!fileInput.files.length) {
            status.textContent = "Pilih file terlebih dahulu.";
            return;
        }

        status.textContent = "Memproses enkripsi...";
        const file = fileInput.files[0];
        const { encrypted, iv, key } = await encryptFile(file);

        const combined = new Uint8Array(iv.length + encrypted.byteLength);
        combined.set(iv);
        combined.set(new Uint8Array(encrypted), iv.length);

        const blob = new Blob([combined]);
        const url = URL.createObjectURL(blob);
        // Gunakan nama file acak yang dihasilkan
        const fileName = generateRandomFileName() + ".enc";
        downloadLink.href = url;
        downloadLink.download = fileName;
        downloadLink.style.display = "inline-block";

        const rawKey = await crypto.subtle.exportKey("raw", key);
        const keyHex = bufferToHex(rawKey);
        status.innerHTML = `Enkripsi selesai.<br><strong>Kunci HEX:</strong> ${keyHex}`;
    });

    document.getElementById('decryptBtn').addEventListener('click', async () => {
        const fileInput = document.getElementById('fileInputDec');
        const keyInput = document.getElementById('keyInput');
        const ext = document.getElementById('fileTypeSelect').value;
        const status = document.getElementById('statusDec');
        const downloadLink = document.getElementById('downloadLinkDec');
        const preview = document.getElementById('previewContainer');

        status.textContent = "Memproses dekripsi...";
        preview.innerHTML = "";
        downloadLink.style.display = "none";

        if (!fileInput.files.length || !keyInput.value.trim()) {
            status.textContent = "Masukkan file dan kunci HEX.";
            return;
        }

        try {
            const decrypted = await decryptFile(fileInput.files[0], keyInput.value.trim());
            const blob = new Blob([decrypted]);
            const url = URL.createObjectURL(blob);
            downloadLink.href = url;
            downloadLink.download = "hasil_dekripsi." + ext;
            downloadLink.style.display = "inline-block";
            status.textContent = "Dekripsi berhasil.";

            if (["jpg", "jpeg", "png"].includes(ext)) {
                const img = document.createElement("img");
                img.src = url;
                preview.appendChild(img);
            } else if (ext === "mp4") {
                const video = document.createElement("video");
                video.src = url;
                video.controls = true;
                video.style.maxWidth = "100%";
                preview.appendChild(video);
            }

        } catch (e) {
            status.textContent = "Gagal dekripsi: " + e.message;
        }
    });
</script>
</body>
</html>
